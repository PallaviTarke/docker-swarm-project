version: '3.8'

services:
  loki:
    image: grafana/loki:2.9.4
    user: "0:0" 
    ports:
      - "3100:3100"
    volumes:
      - ./loki-config.yaml:/etc/loki/loki-config.yaml
      - ./loki-data/chunks:/loki/chunks
      - ./loki-data/rules:/loki/rules
      - ./loki-data/index:/loki/index
      - ./loki-data/compactor:/loki/compactor
      - ./loki-data/wal:/loki/wal
    command: -config.file=/etc/loki/loki-config.yaml
    networks:
      - app-net

  promtail:
    image: grafana/promtail:2.9.4
    command: -config.file=/etc/promtail/promtail.yaml
    volumes:
      - ./promtail-config.yaml:/etc/promtail/promtail.yaml
      - /var/lib/docker/containers:/var/lib/docker/containers:ro
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - /etc/machine-id:/etc/machine-id:ro
      - /etc/hostname:/etc/hostname:ro
      - /etc/os-release:/etc/os-release:ro
    networks:
      - app-net

  cadvisor:
    image: gcr.io/cadvisor/cadvisor:v0.47.2
    ports:
      - "8080:8080"
    volumes:
      - /:/rootfs:ro
      - /var/run:/var/run:ro
      - /sys:/sys:ro
      - /var/lib/docker/:/var/lib/docker:ro
    networks:
      - app-net

  nginx:
    image: nginx:latest
    ports:
      - "80:80"
    volumes:
      - ./nginx/default.conf:/etc/nginx/conf.d/default.conf
    depends_on:
      - node
    networks:
      - app-net
    deploy:
      placement:
        constraints:
          - node.role == manager

  node:
    image: pallavitarke04/nodeapp
    environment:
      - MONGO_URL=mongodb://mongo1:27017,mongo2:27017/mydb?replicaSet=rs0
      - REDIS_URL=redis://redis-master:6379
    networks:
      - app-net
    deploy:
      replicas: 2

  mongo1:
    image: mongo:6
    hostname: mongo1
    command: >
      bash -c "
        mongod --replSet rs0 --bind_ip_all &
        until mongosh --host localhost --eval 'db.runCommand({ ping: 1 })' >/dev/null 2>&1; do
          echo 'Waiting for MongoDB to start...'; sleep 2;
        done;
        if ! mongosh --host localhost --eval 'rs.status()' | grep -q 'myState'; then
          echo 'Initializing replica set...';
          mongosh --host localhost --eval '
            rs.initiate({
              _id: \"rs0\",
              members: [
                { _id: 0, host: \"mongo1:27017\" },
                { _id: 1, host: \"mongo2:27017\" }
              ]
            })
          '
        else
          echo 'Replica set already initialized.';
        fi;
        tail -f /dev/null
      "
    volumes:
      - mongo1_data:/data/db
    networks:
      - app-net
    deploy:
      placement:
        constraints:
          - node.hostname == docker-swarm-mgr

  mongo2:
    image: mongo:6
    hostname: mongo2
    command: ["--replSet", "rs0"]
    volumes:
      - mongo2_data:/data/db
    networks:
      - app-net
    deploy:
      placement:
        constraints:
          - node.hostname == docker-swarm-wrk

  redis-master:
    image: redis:7
    volumes:
      - redis_master_data:/data
    networks:
      - app-net
    deploy:
      placement:
        constraints:
          - node.hostname == docker-swarm-mgr

  redis-slave:
    image: redis:7
    depends_on:
      - redis-master
    command: ["redis-server", "--replicaof", "redis-master", "6379"]
    volumes:
      - redis_slave_data:/data
    networks:
      - app-net
    #deploy:
      #placement:
        #constraints:
          #- node.hostname == docker-swarm-wkr

  redis-sentinel:
    image: redis:7
    command: ["/bin/sh", "-c", "/redis-sentinel-entrypoint.sh"]
    volumes:
      - ./sentinel.conf:/etc/redis/sentinel.conf
      - ./redis-sentinel-entrypoint.sh:/redis-sentinel-entrypoint.sh
    depends_on:
      - redis-master
      - redis-slave
    networks:
      - app-net
    deploy:
      placement:
        constraints:
          - node.hostname == docker-swarm-wkr

  haproxy:
    image: haproxy:latest
    configs:
      - source: haproxy_config
        target: /usr/local/etc/haproxy/haproxy.cfg
    ports:
      - "6380:6380"
    depends_on:
      - redis-master
      - redis-slave
    networks:
      - app-net
    deploy:
      placement:
        constraints:
          - node.hostname == docker-swarm-mgr

  vault:
    image: hashicorp/vault:1.15.4
    cap_add:
      - IPC_LOCK
    environment:
      - VAULT_DEV_ROOT_TOKEN_ID=root
      - VAULT_DEV_LISTEN_ADDRESS=0.0.0.0:8200
    ports:
      - "8200:8200"
    networks:
      - app-net
    deploy:
      placement:
        constraints:
          - node.role == manager

  prometheus:
    image: prom/prometheus
    ports:
      - "9090:9090"
    volumes:
      - /home/pallavi/gcp-docker-swarm-monitoring/monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
    networks:
      - app-net

  grafana:
    image: grafana/grafana
    volumes:
      - grafana-data:/var/lib/grafana
    ports:
      - "3001:3000"
    networks:
      - app-net

  redis_exporter:
    image: oliver006/redis_exporter
    ports:
      - "9121:9121"
    command:
      - '--redis.addr=redis://haproxy:6380'
    depends_on:
      - haproxy
    networks:
      - app-net

configs:
  haproxy_config:
    file: ./haproxy.cfg

networks:
  app-net:
    driver: overlay

volumes:
  mongo1_data:
  mongo2_data:
  redis_master_data:
  redis_slave_data:
  grafana-data:

