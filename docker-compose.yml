version: '3.8'
services:
  loki:
    image: grafana/loki:2.9.4
    user: "10001:10001"
    ports:
      - "3100:3100"
    volumes:
      - /home/pallavi/docker-swarm-project/loki-config.yaml:/etc/loki/loki-config.yaml
      - /home/pallavi/docker-swarm-project/loki-data/chunks:/loki/chunks
      - /home/pallavi/docker-swarm-project/loki-data/rules:/loki/rules
      - /home/pallavi/docker-swarm-project/loki-data/index:/loki/index
      - /home/pallavi/docker-swarm-project/loki-data/compactor:/loki/compactor
      - /home/pallavi/docker-swarm-project/loki-data/wal:/loki/wal
    command: -config.file=/etc/loki/loki-config.yaml
    networks:
      - app-net
    deploy:
      placement:
        constraints:
          - node.hostname == swarm-manager-1
      restart_policy:
        condition: on-failure



  promtail:
    image: grafana/promtail:2.9.4
    command: -config.file=/etc/promtail/promtail.yaml -config.expand-env=true
    configs:
      - source: promtail-config
        target: /etc/promtail/promtail.yaml
    volumes:
      - /var/lib/docker/containers:/var/lib/docker/containers:ro
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - /etc/machine-id:/etc/machine-id:ro
      - /etc/os-release:/etc/os-release:ro
    networks:
      - app-net
    deploy:
      mode: global
      restart_policy:
        condition: on-failure

  cadvisor:
    image: gcr.io/cadvisor/cadvisor:v0.47.2
    ports:
      - "8080:8080"
    volumes:
      - /:/rootfs:ro
      - /var/run:/var/run:ro
      - /sys:/sys:ro
      - /var/lib/docker/:/var/lib/docker:ro
    networks:
      - app-net
    deploy:
      mode: global
      restart_policy:
        condition: on-failure

  nginx:
    image: nginx:latest
    ports:
      - "80:80"
    volumes:
      - ./nginx/default.conf:/etc/nginx/conf.d/default.conf
    depends_on:
      - node
    networks:
      - app-net
    deploy:
      placement:
        constraints:
          - node.role == manager
      restart_policy:
        condition: on-failure

  node:
    image: pallavitarke04/nodeapp:latest
    environment:
      - MONGO_URL=mongodb://mongo1:27017,mongo2:27017/mydb?replicaSet=rs0
      - REDIS_URL=redis://redis-master:6379
    networks:
      - app-net
    deploy:
      replicas: 2
      restart_policy:
        condition: on-failure

  mongo1:
    image: mongo:6
    ports:
      - "27017:27017"
    volumes:
      - mongo1-data:/data/db
    command: ["mongod", "--replSet", "rs0", "--bind_ip_all"]
    networks:
      - app-net
    deploy:
      placement:
        constraints:
          - node.hostname == swarm-manager-1
      restart_policy:
        condition: on-failure

  mongo2:
    image: mongo:6
    volumes:
      - mongo2-data:/data/db
    command: ["mongod", "--replSet", "rs0"]
    networks:
      - app-net
    deploy:
      placement:
        constraints:
          - node.hostname == swarm-manager-2
      restart_policy:
        condition: on-failure

  mongo3:
    image: mongo:6
    volumes:
      - mongo3-data:/data/db
    networks:
      - app-net
    deploy:
      placement:
        constraints:
          - node.hostname == swarm-work
      restart_policy:
        condition: on-failure


  redis-master:
    image: redis:7
    hostname: redis-master
    ports:
      - "6379:6379"
    volumes:
      - redis-master-data:/data
    networks:
      - app-net
    deploy:
      placement:
        constraints:
          - node.role == manager
      restart_policy:
        condition: on-failure

  redis-replica1:
    image: redis:7
    depends_on:
      - redis-master
    volumes:
      - redis-replica1-data:/data
    command: ["redis-server", "--replicaof", "redis-master", "6379"]
    networks:
      - app-net
    deploy:
      restart_policy:
        condition: on-failure

  redis-replica2:
    image: redis:7
    depends_on:
      - redis-master
    volumes:
      - redis-replica2-data:/data
    command: ["redis-server", "--replicaof", "redis-master", "6379"]
    networks:
      - app-net
    deploy:
      restart_policy:
        condition: on-failure
  redis-sentinel1:
    image: redis:7
    configs:
      - source: redis_sentinel_conf
        target: /etc/redis/sentinel.conf.initial
      - source: redis_sentinel_entrypoint
        target: /usr/local/bin/redis-sentinel-entrypoint.sh
        mode: 0555
    volumes:
      - redis-sentinel1-data:/etc/redis
    entrypoint: ["bash", "/usr/local/bin/redis-sentinel-entrypoint.sh"]
    networks:
      - app-net
    deploy:
      placement:
        constraints:
          - node.role == manager
      restart_policy:
        condition: on-failure

  redis-sentinel2:
    image: redis:7
    configs:
      - source: redis_sentinel_conf
        target: /etc/redis/sentinel.conf.initial
      - source: redis_sentinel_entrypoint
        target: /usr/local/bin/redis-sentinel-entrypoint.sh
        mode: 0555
    volumes:
      - redis-sentinel2-data:/etc/redis
    entrypoint: ["bash", "/usr/local/bin/redis-sentinel-entrypoint.sh"]
    networks:
      - app-net
    deploy:
      placement:
        constraints:
          - node.hostname == swarm-manager-2
      restart_policy:
        condition: on-failure

  redis-sentinel3:
    image: redis:7
    configs:
      - source: redis_sentinel_conf
        target: /etc/redis/sentinel.conf.initial
      - source: redis_sentinel_entrypoint
        target: /usr/local/bin/redis-sentinel-entrypoint.sh
        mode: 0555
    volumes:
      - redis-sentinel3-data:/etc/redis
    entrypoint: ["bash", "/usr/local/bin/redis-sentinel-entrypoint.sh"]
    networks:
      - app-net
    deploy:
      placement:
        constraints:
          - node.hostname == swarm-work
      restart_policy:
        condition: on-failure

  haproxy:
    image: haproxy:latest
    configs:
      - source: haproxy_config
        target: /usr/local/etc/haproxy/haproxy.cfg
    ports:
      - "6380:6380"
    depends_on:
      - redis-master
      - redis-replica1
      - redis-replica2
    networks:
      - app-net
    deploy:
      placement:
        constraints:
          - node.role == manager
      restart_policy:
        condition: on-failure
  vault:
    image: hashicorp/vault:1.15.4
    cap_add:
      - IPC_LOCK
    environment:
      - VAULT_DEV_ROOT_TOKEN_ID=root
      - VAULT_DEV_LISTEN_ADDRESS=0.0.0.0:8200
    ports:
      - "8200:8200"
    networks:
      - app-net
    deploy:
      placement:
        constraints:
          - node.role == manager
      restart_policy:
        condition: on-failure
  prometheus:
    image: prom/prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
    networks:
      - app-net
    deploy:
      placement:
        constraints:
          - node.role == manager
      restart_policy:
        condition: on-failure
  grafana:
    image: grafana/grafana:latest
    ports:
      - "3001:3000"
    volumes:
      - grafana-data:/var/lib/grafana
    networks:
      - app-net
    deploy:
      placement:
        constraints:
          - node.role == manager
      restart_policy:
        condition: on-failure
  node-exporter:
    image: prom/node-exporter:latest
    ports:
      - "9100:9100"
    networks:
      - app-net
    deploy:
      mode: global
      restart_policy:
        condition: on-failure

  mongo-exporter:
    image: bitnami/mongodb-exporter:0.40.0
    ports:
      - "9216:9216"
    environment:
      - MONGODB_URI=mongodb://mongo1:27017/?replicaSet=rs0
    networks:
      - app-net
    deploy:
      placement:
        constraints:
          - node.hostname == swarm-manager-1
      restart_policy:
        condition: on-failure

  redis_exporter:
    image: oliver006/redis_exporter
    ports:
      - "9121:9121"
    command:
      - '--redis.addr=redis://haproxy:6380'
    depends_on:
      - haproxy
    networks:
      - app-net
    deploy:
      restart_policy:
        condition: on-failure
configs:
  promtail-config:
    file: ./promtail-config.yaml
  haproxy_config:
    file: ./haproxy.cfg
  loki-config:
    file: ./loki-config.yaml
  redis_sentinel_entrypoint:
    file: ./redis-sentinel-entrypoint.sh
  redis_sentinel_conf:
    file: ./sentinel.conf

networks:
  app-net:
    driver: overlay
    attachable: true
volumes:
  redis-sentinel1-data:
  redis-sentinel2-data:
  redis-sentinel3-data:
  mongo1-data:
  mongo2-data:
  mongo3-data:
  redis-master-data:
  redis-replica1-data:
  redis-replica2-data:
  grafana-data:
